version: "3.3"
services:
  gateway:    
    container_name: gateway
    build:      
      dockerfile: ./Gateway/Dockerfile
    depends_on: [ mssql ]        
    ports:
      - "8085:80"
    networks:
      - database-network
  accommodation_service:    
    container_name: accommodation_service
    build:      
      dockerfile: ./AccommodationService/Dockerfile
    depends_on: [ mssql ]        
    ports:
      - "8081:80"
    networks:
      - database-network
  flight_service:    
    container_name: flight_service
    build:      
      dockerfile: ./FlightService/Dockerfile
    depends_on: [ mssql ]        
    ports:
      - "8082:80"
    networks:
      - database-network
  system_service:    
    container_name: system_service
    build:      
      dockerfile: ./SystemService/Dockerfile
    depends_on: [ mssql ]        
    ports:
      - "8083:80"
    networks:
      - database-network
  user_service:    
    container_name: user_service
    build:      
      dockerfile: ./UserService/Dockerfile
    depends_on: [ mssql ]        
    ports:
      - "8084:80"
    networks:
      - database-network
  mssql:
    image: "mcr.microsoft.com/azure-sql-edge"
    container_name: mssql
    hostname: mssql
    environment:
      SA_PASSWORD: "A&VeryComplex123Password"
      ACCEPT_EULA: "Y"
    restart: unless-stopped    
    ports:
      # So we can access the database
      # From a tool like JetBrains Rider
      # Optional for this demo
      - "1433:1433" 	
    networks:
      - database-network
  mongodb_container:
    image: mongo:latest
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: rootpassword
    ports:
      - 27017:27017
    volumes:
      - mongodb_data_container:/data/db
    networks:
      - database-network

volumes:
  mongodb_data_container:

networks:
  database-network:
    name: database-network
